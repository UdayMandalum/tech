API Design : Pick the protocal, define resouces, specify how cleints send and recieve data
Protocals : 
REST : REpresentaional state transfer. Protocal for web services using standard HTTP menthods
GraphQL : Flexible dats fetching. Single end point with query language where clients decide what data they need. Avoid over/under fetching 
RPC : Good for internal APIs for high performance connections. Uses binary serilization and HTTP/2 for effective communications between clients. 
e.g. gRPC, Apache Thrift. Fater than REST JSON over HTTP approach. Action oriented unlike REST which is resource oriented approach. 

REST 
  Seperation of client and server, stateless requests, chacheble 
Resource : represents things and not actions

Passing data to API 
Path parameter : e.g. /event/123
Query parameter : e.g. /event?city=NYC
Request body : payloads for post

verbs : get, post, put,patch, delete
header : content type, length, auth, cookies . content can be html, json, xml, css

Return from API 
status code : 200 success, 201 resource created, 400 bad request, 404 not found , 500 server error
headers 
content : response body usually json, images , blobs

Security : API Key , JWT (json web token)



