4 pillars

Encapsulation : Containing information inside object, exposing certain info
    Avoid data curruption from unintended changes, using private public access
Abstraction : create a abstraction layer hiding details of class . Simple interface to interact with object.
    Expose only essential features and hide complexity from user
                Encapsulation        	                            Abstraction
Purpose:        Protect data by hiding implementation	    Hide complexity by showing only essentials
How it's done:	Access modifiers (private, public)	        Abstract classes, interfaces
Focus:        	Data protection	                            Behavior simplification
Example:    	Private fields with getters/setters	        Abstract methods, interfaces
Real-world analogy	Medicine bottle with a sealed cap	Car pedal (you press, not knowing how it works)

Inheritance : reuse the functionaly from others. 
Polymophism : Multiple forms can be given a method. e.g. Method overriding . 
              Virtual method of base class can be overriden in child class

Property to access object data
Composition : a class contained with another class

Interface : A contract. Class with only signatures. Implemented by class

Interview Questions
What are the four pillars of OOP? Explain each with examples.

What is the difference between abstraction and encapsulation?

How does inheritance work in C#? Can a class inherit from multiple classes?

What is polymorphism? Explain compile-time vs runtime polymorphism.

What is method overloading vs method overriding?
overloading is complite time polymorphism, overriding is run-time

What is the difference between an interface and an abstract class? When would you use each?

Can a method be virtual and abstract at the same time? 
no, will give compile time error. Abstract methods are implicitly virtual

What is a sealed class? Why and when would you use it?
You want to protect internal logic or prevent modification through inheritance (e.g., utility classes, core system classes).

What is the difference between new and override keywords in method hiding?

Can you explain how constructors work in inheritance?
Base class constructors are always called first, before the derived class constructor.

C# questions 
What are access modifiers in C# and how do they relate to encapsulation?

Explain the role of the base keyword in C#.

Whatâ€™s the difference between override, virtual, and abstract?

How does C# implement polymorphism behind the scenes (vtable, etc.)?
runtime polymorphism is implemented through something called the Virtual Method Table (internal lookup table)
Each class has its own vtable that stores function pointers to its virtual method implementations

What are partial classes and when should they be used?
A partial class allows you to split the definition of a class into multiple files. Used Large Classes, Multiple Developers

 Scenario-Based / Practical Questions
Design a class structure for a payment system that supports multiple payment methods (credit card, PayPal, etc.).

If you had to build a plugin-based architecture for file parsers (XML, JSON, CSV), how would you use interfaces or abstract classes?
I would use an Interface as the core contract for the plugins and an Abstract Class to handle common, non-optional logic shared by most parsers.

How would you test a method that relies heavily on polymorphism?

In a microservices setup, how would you ensure encapsulation of domain logic?

You notice frequent changes to a base class that affect many subclasses. How would you refactor?
